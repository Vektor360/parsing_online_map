{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3074bd5c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"map\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\aefa1\\Desktop\\VUE JS\\vue-layers\\src\\components\\Map.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { Map, View } from 'ol';\r\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\r\nimport { OSM, Vector as VectorSource } from 'ol/source';\r\nimport Overlay from 'ol/Overlay';\r\nimport { Circle as Fill,Stroke, Style } from 'ol/style';\r\nimport { toLonLat } from 'ol/proj';\r\nimport Feature from 'ol/Feature';\r\nimport { fromCircle } from 'ol/geom/Polygon';\r\nimport { getLength } from 'ol/sphere';\r\n\r\nexport default {\r\n  name: 'CustomMap',\r\n  data() {\r\n    return {\r\n      map: null,\r\n      marker: null,\r\n      overlay: null,\r\n      coordinates: '',\r\n      circleFeature: null,\r\n      circleRadius: 0,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.map = new Map({\r\n      target: 'map',\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM(),\r\n        }),\r\n      ],\r\n      view: new View({\r\n        center: [0, 0],\r\n        zoom: 2,\r\n      }),\r\n    });\r\n\r\n    // Добавляем обработчик события клика на карту\r\n    this.map.on('click', this.handleMapClick);\r\n\r\n    // Создаем всплывающее окно для метки\r\n    this.overlay = new Overlay({\r\n      element: document.createElement('div'),\r\n      positioning: 'bottom-center',\r\n      stopEvent: false,\r\n    });\r\n    this.map.addOverlay(this.overlay);\r\n  },\r\n  methods: {\r\n    handleMapClick(event) {\r\n      // Получаем координаты места клика\r\n      const coords = event.coordinate;\r\n\r\n      // Преобразуем координаты в долготу и широту с 4 знаками после запятой\r\n      const lonLat = toLonLat(coords).map(coord => coord.toFixed(4));\r\n      const lon = lonLat[0];\r\n      const lat = lonLat[1];\r\n\r\n      // Обновляем текстовое поле с координатами\r\n      this.coordinates = `Долгота: ${lon}, Широта: ${lat}`;\r\n\r\n      // Удаляем старую метку, если она была\r\n      if (this.marker) {\r\n        this.map.removeOverlay(this.marker);\r\n      }\r\n\r\n      // Создаем новую метку\r\n      const markerElement = document.createElement('div');\r\n      markerElement.className = 'marker';\r\n      markerElement.style.backgroundColor = 'black'; // Цвет метки\r\n      markerElement.style.width = '5px'; // Ширина метки\r\n      markerElement.style.height = '5px'; // Высота метки\r\n      markerElement.style.borderRadius = '50%'; // Круглая метка\r\n\r\n      this.marker = new Overlay({\r\n        element: markerElement,\r\n        position: coords,\r\n        positioning: 'center-center',\r\n        stopEvent: false,\r\n      });\r\n      this.map.addOverlay(this.marker);\r\n\r\n      // Создаем эллипс вокруг метки\r\n      this.addEllipseFeature(coords, 10000, 10000);\r\n\r\n      // Позиционируем всплывающее окно с координатами над меткой\r\n      this.overlay.setPosition(coords);\r\n      const element = this.overlay.getElement();\r\n      element.innerHTML = this.coordinates;\r\n    },\r\n\r\n    addEllipseFeature(center, semiMajor, semiMinor) {\r\n      const circleGeom = new Circle(center, semiMajor);\r\n      const circleCoords = fromCircle(circleGeom, 64).getCoordinates()[0];\r\n      const ellipseFeature = new Feature({\r\n        geometry: new Polygon([circleCoords]),\r\n      });\r\n      ellipseFeature.setStyle(new Style({\r\n        stroke: new Stroke({\r\n          color: 'blue',\r\n          width: 3,\r\n        }),\r\n        fill: new Fill({\r\n          color: 'rgba(0, 0, 255, 0.1)',\r\n        }),\r\n      }));\r\n      const vectorLayer = new VectorLayer({\r\n        source: new VectorSource({\r\n          features: [ellipseFeature],\r\n        }),\r\n      });\r\n      this.map.addLayer(vectorLayer);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.marker {\r\n  position: relative;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,EAAE,EAAC;AAAK;;uBAAbC,mBAAA,CAAoB,OAApBC,UAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}