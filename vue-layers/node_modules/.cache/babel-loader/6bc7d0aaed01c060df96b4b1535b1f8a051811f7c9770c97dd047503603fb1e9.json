{"ast":null,"code":"import { Map, View } from 'ol';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport Overlay from 'ol/Overlay';\nimport { Stroke, Style } from 'ol/style';\nimport { toLonLat } from 'ol/proj';\nimport Feature from 'ol/Feature';\nimport { fromCircle } from 'ol/geom/Polygon';\nimport Circle from 'ol/geom/Circle';\nimport Polygon from 'ol/geom/Polygon';\nimport { watch } from 'vue';\nexport default {\n  name: 'CustomMap',\n  props: {\n    ellipseRadius: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      map: null,\n      marker: null,\n      overlay: null,\n      coordinates: ''\n    };\n  },\n  mounted() {\n    watch(props.ellipseRadius, () => console.log(props.ellipseRadius));\n    this.map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      })],\n      view: new View({\n        center: [0, 0],\n        zoom: 2\n      })\n    });\n\n    // Добавляем обработчик события клика на карту\n    this.map.on('click', this.handleMapClick);\n\n    // Создаем всплывающее окно для метки\n    this.overlay = new Overlay({\n      element: document.createElement('div'),\n      positioning: 'bottom-center',\n      stopEvent: false\n    });\n    this.map.addOverlay(this.overlay);\n  },\n  methods: {\n    handleMapClick(event) {\n      // Получаем координаты места клика\n      const coords = event.coordinate;\n\n      // Преобразуем координаты в долготу и широту с 4 знаками после запятой\n      const lonLat = toLonLat(coords).map(coord => coord.toFixed(4));\n      const lon = lonLat[0];\n      const lat = lonLat[1];\n\n      // Обновляем текстовое поле с координатами\n      this.coordinates = `Долгота: ${lon}, Широта: ${lat}`;\n\n      // Удаляем старую метку, если она была\n      if (this.marker) {\n        this.map.removeOverlay(this.marker);\n      }\n\n      // Создаем новую метку\n      const markerElement = document.createElement('div');\n      markerElement.className = 'marker';\n      markerElement.style.backgroundColor = 'black'; // Цвет метки\n      markerElement.style.width = '5px'; // Ширина метки\n      markerElement.style.height = '5px'; // Высота метки\n      markerElement.style.borderRadius = '50%'; // Круглая метка\n\n      this.marker = new Overlay({\n        element: markerElement,\n        position: coords,\n        positioning: 'center-center',\n        stopEvent: false\n      });\n      this.map.addOverlay(this.marker);\n      this.map.getLayers().forEach(layer => {\n        if (layer instanceof VectorLayer) {\n          this.map.removeLayer(layer);\n        }\n      });\n\n      // Создаем эллипс вокруг метки\n      this.addEllipseFeature(coords, this.ellipseRadius);\n\n      // Позиционируем всплывающее окно с координатами над меткой\n      this.overlay.setPosition(coords);\n      const element = this.overlay.getElement();\n      element.innerHTML = this.coordinates;\n    },\n    addEllipseFeature(center, radius) {\n      const circleGeom = new Circle(center, radius);\n      const circleCoords = fromCircle(circleGeom, 64).getCoordinates()[0];\n      const ellipseFeature = new Feature({\n        geometry: new Polygon([circleCoords])\n      });\n      ellipseFeature.setStyle(new Style({\n        stroke: new Stroke({\n          color: 'blue',\n          width: 3\n        })\n      }));\n      const vectorLayer = new VectorLayer({\n        source: new VectorSource({\n          features: [ellipseFeature]\n        })\n      });\n      this.map.addLayer(vectorLayer);\n    }\n  }\n};","map":{"version":3,"names":["Map","View","Tile","TileLayer","Vector","VectorLayer","OSM","VectorSource","Overlay","Stroke","Style","toLonLat","Feature","fromCircle","Circle","Polygon","watch","name","props","ellipseRadius","type","Number","required","data","map","marker","overlay","coordinates","mounted","console","log","target","layers","source","view","center","zoom","on","handleMapClick","element","document","createElement","positioning","stopEvent","addOverlay","methods","event","coords","coordinate","lonLat","coord","toFixed","lon","lat","removeOverlay","markerElement","className","style","backgroundColor","width","height","borderRadius","position","getLayers","forEach","layer","removeLayer","addEllipseFeature","setPosition","getElement","innerHTML","radius","circleGeom","circleCoords","getCoordinates","ellipseFeature","geometry","setStyle","stroke","color","vectorLayer","features","addLayer"],"sources":["C:\\Users\\aefa1\\Desktop\\VUE JS\\vue-layers\\src\\components\\Map.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { Map, View } from 'ol';\r\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\r\nimport { OSM, Vector as VectorSource } from 'ol/source';\r\nimport Overlay from 'ol/Overlay';\r\nimport { Stroke, Style } from 'ol/style';\r\nimport { toLonLat } from 'ol/proj';\r\nimport Feature from 'ol/Feature';\r\nimport { fromCircle } from 'ol/geom/Polygon';\r\nimport Circle from 'ol/geom/Circle';\r\nimport Polygon from 'ol/geom/Polygon';\r\nimport { watch } from 'vue';\r\n\r\nexport default {\r\n  name: 'CustomMap',\r\n  props: {\r\n    ellipseRadius: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      map: null,\r\n      marker: null,\r\n      overlay: null,\r\n      coordinates: ''\r\n    };\r\n  },\r\n  mounted() {\r\n    watch(props.ellipseRadius,()=>console.log(props.ellipseRadius));\r\n    this.map = new Map({\r\n      target: 'map',\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM()\r\n        })\r\n      ],\r\n      view: new View({\r\n        center: [0, 0],\r\n        zoom: 2\r\n      })\r\n    });\r\n\r\n    // Добавляем обработчик события клика на карту\r\n    this.map.on('click', this.handleMapClick);\r\n\r\n    // Создаем всплывающее окно для метки\r\n    this.overlay = new Overlay({\r\n      element: document.createElement('div'),\r\n      positioning: 'bottom-center',\r\n      stopEvent: false\r\n    });\r\n    this.map.addOverlay(this.overlay);\r\n  },\r\n  methods: {\r\n    handleMapClick(event) {\r\n      // Получаем координаты места клика\r\n      const coords = event.coordinate;\r\n\r\n      // Преобразуем координаты в долготу и широту с 4 знаками после запятой\r\n      const lonLat = toLonLat(coords).map(coord => coord.toFixed(4));\r\n      const lon = lonLat[0];\r\n      const lat = lonLat[1];\r\n\r\n      // Обновляем текстовое поле с координатами\r\n      this.coordinates = `Долгота: ${lon}, Широта: ${lat}`;\r\n\r\n      // Удаляем старую метку, если она была\r\n      if (this.marker) {\r\n        this.map.removeOverlay(this.marker);\r\n      }\r\n\r\n      // Создаем новую метку\r\n      const markerElement = document.createElement('div');\r\n      markerElement.className = 'marker';\r\n      markerElement.style.backgroundColor = 'black'; // Цвет метки\r\n      markerElement.style.width = '5px'; // Ширина метки\r\n      markerElement.style.height = '5px'; // Высота метки\r\n      markerElement.style.borderRadius = '50%'; // Круглая метка\r\n\r\n      this.marker = new Overlay({\r\n        element: markerElement,\r\n        position: coords,\r\n        positioning: 'center-center',\r\n        stopEvent: false\r\n      });\r\n      this.map.addOverlay(this.marker);\r\n\r\n      this.map.getLayers().forEach(layer => {\r\n        if (layer instanceof VectorLayer) {\r\n          this.map.removeLayer(layer);\r\n        }\r\n      });\r\n\r\n      // Создаем эллипс вокруг метки\r\n      this.addEllipseFeature(coords, this.ellipseRadius);\r\n\r\n      // Позиционируем всплывающее окно с координатами над меткой\r\n      this.overlay.setPosition(coords);\r\n      const element = this.overlay.getElement();\r\n      element.innerHTML = this.coordinates;\r\n    },\r\n\r\n    addEllipseFeature(center, radius) {\r\n      const circleGeom = new Circle(center, radius);\r\n      const circleCoords = fromCircle(circleGeom, 64).getCoordinates()[0];\r\n      const ellipseFeature = new Feature({\r\n        geometry: new Polygon([circleCoords])\r\n      });\r\n      ellipseFeature.setStyle(new Style({\r\n        stroke: new Stroke({\r\n          color: 'blue',\r\n          width: 3\r\n        })\r\n      }));\r\n      const vectorLayer = new VectorLayer({\r\n        source: new VectorSource({\r\n          features: [ellipseFeature]\r\n        })\r\n      });\r\n      this.map.addLayer(vectorLayer);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n#map {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.marker {\r\n  position: relative;\r\n}\r\n</style>\r\n"],"mappings":"AAKA,SAASA,GAAG,EAAEC,IAAG,QAAS,IAAI;AAC9B,SAASC,IAAG,IAAKC,SAAS,EAAEC,MAAK,IAAKC,WAAU,QAAS,UAAU;AACnE,SAASC,GAAG,EAAEF,MAAK,IAAKG,YAAW,QAAS,WAAW;AACvD,OAAOC,OAAM,MAAO,YAAY;AAChC,SAASC,MAAM,EAAEC,KAAI,QAAS,UAAU;AACxC,SAASC,QAAO,QAAS,SAAS;AAClC,OAAOC,OAAM,MAAO,YAAY;AAChC,SAASC,UAAS,QAAS,iBAAiB;AAC5C,OAAOC,MAAK,MAAO,gBAAgB;AACnC,OAAOC,OAAM,MAAO,iBAAiB;AACrC,SAASC,KAAI,QAAS,KAAK;AAE3B,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAK,EAAE;IACLC,aAAa,EAAE;MACbC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,MAAM,EAAE,IAAI;MACZC,OAAO,EAAE,IAAI;MACbC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACRZ,KAAK,CAACE,KAAK,CAACC,aAAa,EAAC,MAAIU,OAAO,CAACC,GAAG,CAACZ,KAAK,CAACC,aAAa,CAAC,CAAC;IAC/D,IAAI,CAACK,GAAE,GAAI,IAAIxB,GAAG,CAAC;MACjB+B,MAAM,EAAE,KAAK;MACbC,MAAM,EAAE,CACN,IAAI7B,SAAS,CAAC;QACZ8B,MAAM,EAAE,IAAI3B,GAAG,CAAC;MAClB,CAAC,EACF;MACD4B,IAAI,EAAE,IAAIjC,IAAI,CAAC;QACbkC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACdC,IAAI,EAAE;MACR,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,IAAI,CAACZ,GAAG,CAACa,EAAE,CAAC,OAAO,EAAE,IAAI,CAACC,cAAc,CAAC;;IAEzC;IACA,IAAI,CAACZ,OAAM,GAAI,IAAIlB,OAAO,CAAC;MACzB+B,OAAO,EAAEC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACtCC,WAAW,EAAE,eAAe;MAC5BC,SAAS,EAAE;IACb,CAAC,CAAC;IACF,IAAI,CAACnB,GAAG,CAACoB,UAAU,CAAC,IAAI,CAAClB,OAAO,CAAC;EACnC,CAAC;EACDmB,OAAO,EAAE;IACPP,cAAcA,CAACQ,KAAK,EAAE;MACpB;MACA,MAAMC,MAAK,GAAID,KAAK,CAACE,UAAU;;MAE/B;MACA,MAAMC,MAAK,GAAItC,QAAQ,CAACoC,MAAM,CAAC,CAACvB,GAAG,CAAC0B,KAAI,IAAKA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MAC9D,MAAMC,GAAE,GAAIH,MAAM,CAAC,CAAC,CAAC;MACrB,MAAMI,GAAE,GAAIJ,MAAM,CAAC,CAAC,CAAC;;MAErB;MACA,IAAI,CAACtB,WAAU,GAAK,YAAWyB,GAAI,aAAYC,GAAI,EAAC;;MAEpD;MACA,IAAI,IAAI,CAAC5B,MAAM,EAAE;QACf,IAAI,CAACD,GAAG,CAAC8B,aAAa,CAAC,IAAI,CAAC7B,MAAM,CAAC;MACrC;;MAEA;MACA,MAAM8B,aAAY,GAAIf,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACnDc,aAAa,CAACC,SAAQ,GAAI,QAAQ;MAClCD,aAAa,CAACE,KAAK,CAACC,eAAc,GAAI,OAAO,EAAE;MAC/CH,aAAa,CAACE,KAAK,CAACE,KAAI,GAAI,KAAK,EAAE;MACnCJ,aAAa,CAACE,KAAK,CAACG,MAAK,GAAI,KAAK,EAAE;MACpCL,aAAa,CAACE,KAAK,CAACI,YAAW,GAAI,KAAK,EAAE;;MAE1C,IAAI,CAACpC,MAAK,GAAI,IAAIjB,OAAO,CAAC;QACxB+B,OAAO,EAAEgB,aAAa;QACtBO,QAAQ,EAAEf,MAAM;QAChBL,WAAW,EAAE,eAAe;QAC5BC,SAAS,EAAE;MACb,CAAC,CAAC;MACF,IAAI,CAACnB,GAAG,CAACoB,UAAU,CAAC,IAAI,CAACnB,MAAM,CAAC;MAEhC,IAAI,CAACD,GAAG,CAACuC,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAI,IAAK;QACpC,IAAIA,KAAI,YAAa5D,WAAW,EAAE;UAChC,IAAI,CAACmB,GAAG,CAAC0C,WAAW,CAACD,KAAK,CAAC;QAC7B;MACF,CAAC,CAAC;;MAEF;MACA,IAAI,CAACE,iBAAiB,CAACpB,MAAM,EAAE,IAAI,CAAC5B,aAAa,CAAC;;MAElD;MACA,IAAI,CAACO,OAAO,CAAC0C,WAAW,CAACrB,MAAM,CAAC;MAChC,MAAMR,OAAM,GAAI,IAAI,CAACb,OAAO,CAAC2C,UAAU,CAAC,CAAC;MACzC9B,OAAO,CAAC+B,SAAQ,GAAI,IAAI,CAAC3C,WAAW;IACtC,CAAC;IAEDwC,iBAAiBA,CAAChC,MAAM,EAAEoC,MAAM,EAAE;MAChC,MAAMC,UAAS,GAAI,IAAI1D,MAAM,CAACqB,MAAM,EAAEoC,MAAM,CAAC;MAC7C,MAAME,YAAW,GAAI5D,UAAU,CAAC2D,UAAU,EAAE,EAAE,CAAC,CAACE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;MACnE,MAAMC,cAAa,GAAI,IAAI/D,OAAO,CAAC;QACjCgE,QAAQ,EAAE,IAAI7D,OAAO,CAAC,CAAC0D,YAAY,CAAC;MACtC,CAAC,CAAC;MACFE,cAAc,CAACE,QAAQ,CAAC,IAAInE,KAAK,CAAC;QAChCoE,MAAM,EAAE,IAAIrE,MAAM,CAAC;UACjBsE,KAAK,EAAE,MAAM;UACbpB,KAAK,EAAE;QACT,CAAC;MACH,CAAC,CAAC,CAAC;MACH,MAAMqB,WAAU,GAAI,IAAI3E,WAAW,CAAC;QAClC4B,MAAM,EAAE,IAAI1B,YAAY,CAAC;UACvB0E,QAAQ,EAAE,CAACN,cAAc;QAC3B,CAAC;MACH,CAAC,CAAC;MACF,IAAI,CAACnD,GAAG,CAAC0D,QAAQ,CAACF,WAAW,CAAC;IAChC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}